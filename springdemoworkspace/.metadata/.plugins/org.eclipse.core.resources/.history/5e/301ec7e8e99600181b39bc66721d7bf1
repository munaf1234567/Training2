package com.exilant.commons;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.sql.*;
import static org.apache.spark.sql.functions.*;

import java.util.*;
public class SparkSqlDemo {

	public static void main(String[] args) {

	     Logger.getLogger("org").setLevel(Level.ERROR);
	     Logger.getLogger("akka").setLevel(Level.ERROR);
	 	JavaSparkContext spContext = SparkConnection.getContext();
	 	SparkSession spSession =SparkConnection.getSession();
	 	
	 	Dataset<Row> empDatafields=spSession.read().json("./dada/cust.json");
	 	empDatafields.show();
	 	empDatafields.printSchema();
	 	
	 	//data  queries
	 	System.out.println("select demo");
	 	
	 	empDatafields.select(col("name"),col("salary")).show();
	 	empDatafields.filter(col("gender").equalTo("male")).show();
	 	empDatafields.groupBy(col("gender")).count().show();
		Dataset<Row> summDatafields= empDatafields.groupBy(col("deptid")).agg(avg(empDatafields.col("salary")), max("age"));
		//---------------------------------------------------------------------------------------------
		Department d1= new Department(100, "develop");
		Department d2= new Department(200, "testing");
		List<Department> deptList= new ArrayList<Department>();
		deptList.add(d1);
		deptList.add(d2);
		Dataset<Row> deptDatafields=spSession.createDataFrame(deptList, Department.class);
		System.out.println("dept contents are ");
		deptDatafields.show();
		//---------------------------------------------------------------------------------------------
		System.out.println("join Employee with Dept");
		Dataset<Row> empdeptjoim=empDatafields.join(deptDatafields);
		empdeptjoim.show();
		//---------------------------------------------------------------------------------------------
		
		Dataset<Row> empdeptinnerjoim=empDatafields.join(deptDatafields,col("deptid").equalTo(col("deptin")));
		empdeptinnerjoim.show();
		//---------------------------------------------------------------------------------------------
		
		Dataset<Row> empdeptnotrjoim=empDatafields.join(deptDatafields,col("deptid").notEqual((col("deptin"))));
		empdeptnotrjoim.show();
		
		//---------------------------------------------------------------------------------------------
		
		System.out.println("join with aggregation");
		
		empDatafields.filter(col("age").gt(30))
		.join(deptDatafields,col("deptid")
		.equalTo(col("deptin"))).groupBy(col("deptid"))
		.agg(avg(empDatafields.col("salary")),max(empDatafields.col("age")))
		.show();
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	 	
	}

}
